"""This pipeline assumes that the files of the antibody benchmark are already downloaded"""

from pathlib import Path
from os.path import join
import pandas as pd

DATASET_NAME = "antibody_benchmark"

project_root = Path(workflow.basedir).parents[3] # two directories above - absolute paths not working
resource_folder = join(project_root, "resources")
results_folder = join(project_root, "results")

dataset_resource_folder = join(resource_folder, DATASET_NAME)
dataset_results_folder = join(results_folder, DATASET_NAME)

pdb_folder = join(dataset_resource_folder, "pdbs")

relaxed_pdbs = join(dataset_results_folder, "force_field_tests", "ab_benchmark", "pdbs_relaxed")
unrelaxed_pdbs = join(dataset_results_folder, "force_field_tests", "ab_benchmark", "pdbs_unrelaxed")
benchmark_scores_path = join(dataset_results_folder, "force_field_tests", "ab_benchmark", "rosetta_benchmark_scores.csv")

benchmark_df_path = join(dataset_resource_folder, "antibody_benchmark_cases.xlsx")
df = pd.read_excel(benchmark_df_path)

pdb_ids = set([ complex_id.split("_")[0] for complex_id in df["Complex PDB"].values ])


rule all:
    input:
        benchmark_scores_path


rule bind_relax_bound:
    input:
        pdb_folder + "/{pdb_id}_r_b.pdb",
        pdb_folder + "/{pdb_id}_l_b.pdb"
    output:
        relaxed_pdbs + "/{pdb_id}_b.pdb",
        unrelaxed_pdbs + "/{pdb_id}_b.pdb",

    conda: join(project_root, "envs", "generation_environment.yml")
    script: "scripts/bind_relax_bound.py"


rule relax_unbound_ligand:
    input:
        pdb_folder + "/{pdb_id}_l_u.pdb"
    output:
        relaxed_pdbs + "/{pdb_id}_l_u.pdb",
        unrelaxed_pdbs + "/{pdb_id}_l_u.pdb",
    conda: join(project_root, "envs", "generation_environment.yml")
    script: "scripts/relax_unbound.py"


rule relax_unbound_receptor:
    input:
        pdb_folder + "/{pdb_id}_r_u.pdb",
    output:
        relaxed_pdbs + "/{pdb_id}_r_u.pdb",
        unrelaxed_pdbs+ "/{pdb_id}_r_u.pdb",
    conda: join(project_root, "envs", "generation_environment.yml")
    script: "scripts/relax_unbound.py"


rule score:
    input:
        expand(relaxed_pdbs + "/{pdb_id}_r_u.pdb", pdb_id=pdb_ids),
        expand(relaxed_pdbs + "/{pdb_id}_l_u.pdb", pdb_id=pdb_ids),
        expand(relaxed_pdbs + "/{pdb_id}_b.pdb", pdb_id=pdb_ids),
        expand(unrelaxed_pdbs + "/{pdb_id}_r_u.pdb", pdb_id=pdb_ids),
        expand(unrelaxed_pdbs + "/{pdb_id}_l_u.pdb", pdb_id=pdb_ids),
        expand(unrelaxed_pdbs + "/{pdb_id}_b.pdb", pdb_id=pdb_ids),
    output:
        benchmark_scores_path
    params:
        pdb_ids=pdb_ids,
        relaxed_pdb_path=relaxed_pdbs,
        unrelaxed_pdb_path=unrelaxed_pdbs
    conda: join(project_root, "envs", "generation_environment.yml")
    script: "scripts/score.py"
